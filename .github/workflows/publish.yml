name: Build and Publish to PyPI
on:
  push:
    tags:
      - "*.*.*" # Run on any version tag

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --frozen --no-dev

      - name: Extract version from tag
        run: |
          echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Verify package version matches tag
        run: |
          CURRENT_VERSION=$(grep -m1 'current_version = ' pyproject.toml | cut -d'"' -f2)
          echo "Current version in pyproject.toml: $CURRENT_VERSION"
          echo "Tag version: ${{ env.PACKAGE_VERSION }}"
          if [ "$CURRENT_VERSION" != "${{ env.PACKAGE_VERSION }}" ]; then
            echo "::error::Version mismatch between tag and pyproject.toml"
            exit 1
          fi

      - name: Build package
        run: uv build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run uv publish
        run: uv publish

  github-release:
    name: Create GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "$GITHUB_REF_NAME"
          --repo "$GITHUB_REPOSITORY"
          --title "$GITHUB_REF_NAME"
          --generate-notes

      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"
